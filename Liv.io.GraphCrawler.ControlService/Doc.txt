*A simple crawler which searchs for the appearence of nodes from a graph in a downloaded text.*

* crawl?url={url}  
_downloads a web page and searches for words which appear in the page and in the graph. Found words are is sorted by classes and instances._  

* addNode?label={label}&type={type}  
_adds a node to the graph (Type can be everything in principal but is pratically limited to 'Class' and 'Instance' at the moment)_  

* addEdge?fromNode={fromNode}&toNode={toNode}&predicate={predicate}  
_adds a new edge to the graph._  

* findNodes?labelStartsWith={labelStartsWith}  
_finds nodes by matching the first characters of a node's label._  

* findEdges?labelStartsWith={labelStartsWith}  
_finds edges by matching the first characters of a edges's label._  

* findEdgesFromNode?fromNode={fromNode}  
_finds all edges which lead from the given node to antoher_  

* findEdgesToNode?toNode={toNode}  
_finds all edges which lead to the given node_  

* loadNodes?nodes={nodes}  
_loads all node data for all given node IDs_ 

* loadEdges?edges={edges}  
_loads all edge data for all given edge IDs_ 

* loadClientCode/apps/{app}  
_loads static files from the configured "client_code" directory


Filter syntax:
 % =[]= geht massiv gegen [wütende|aufgebrachte] =X= vor %
 Die {"Polizei" geht massiv gegen wütende "Demonstranten" vor}.
 Die {"Polizei" geht massiv gegen "Demonstranten" vor}.
 
 means: Match every part in a crawled page which has the above pattern.
 =[]= - Capture instance or match existing instance
 =%%= - Capture class or match existing class
 =X=  - Capture as unknown node or match existing class or instance
 ~[]~ - Match only if instance exists
 ~%%~ - Match only if class exists
 ~~   - Match only if instance or class exists
 
 [] - Envelop for optional parts. Can contain multiple options devided by a pipe. 
 Can also be [=[]=] or [=%%=] or [=[]=|=%%=] to describe that the query should succeed even if the class or instance is not found, the class or instance will not be stored because its optional 
 


